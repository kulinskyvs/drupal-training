<?php

// $Id$
/**
 * @file
 * Module for fetching data from Goodreads.com.
 * This module provides block content retrieved from a
 * Goodreads.com bookshelf.
 * @see http://www.goodreads.com
 */

define('MODULE_NAME', 'bookshelf');

//define variable names to be customixe by current module
Define('VAR_GOODREADS_SERVICE_URL',     "goodreads_service_url");
Define('VAR_GOODREADS_BOOKSHELF_URL',   "goosreads_bookshelf_url");
Define('VAR_GOODREADS_NOCOVER_IMG_URL', "goosreads_nocover_img_url");
Define('VAR_GOODREADS_ITEMS_NUMBER',    "goodreads_items_number");

//TODO: make this url configurable at module level
define('DEFAULT_GOODREADS_SERVICE_URL' , 'http://www.goodreads.com');
define('DEFAULT_GOODREADS_BOOKSHELF_URL', 'https://www.goodreads.com/review/list_rss/398385?shelf=history-of-philosophy');
define('DEFAULT_GOODREADS_NOCOVER_IMG' , 'http://www.goodreads.com/images/nocover-60x80.jpg');
define('DEFAULT_GOODREADS_ITEMS_NUMBER', 3);

Define('GOODREADS_CONFIG_MENU_URL', 'admin/settings/bookshelf');

/**
 * Implementation of hook_block().
 *
 * @param $op What kind of information to retrieve about the block. Possible values: list, configure, save, view.
 * @param $delta Which block to return.
 * @param $edit Data from a configuration form, if submitted.
 */
function bookshelf_block($op = 'list', $delta = 0, $edit = array()) {

  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Virtual bookshelf');
      return $blocks;

    case 'view':
      $blocks['subject'] = t('Virtual bookshelf');
      $blocks['content'] = _fetch_bookshelf(_variable_bookshelf_url(), _variable_items_number());

      return $blocks;
  }
}

/**
 * Implementation of hook_help().
 *
 * @param $path A Drupal menu router path the help is being requested.
 * @param $arg An array that corresponds to the return of the arg() function.
 * @return A localized string containing the help text.
 */
function bookshelf_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#".MODULE_NAME:
      $text = 'The Bookshelf module uses !goodreads_url to build virtual bookshelf';
      $output = "<p>".
          t($text, array("!goodreads_url" => l("Goodreads service", _variable_service_url()))).
          "</p>";
      break;
  }
  return $output;
}

/**
 * Retrive information from Goodreas bookshelf via XML API.
 * 
 * This makes an HTTP connection to the given URL, and
 * retrieves XML data, which it then attempts to format
 * for display.
 * 
 * @param $url target bookshelf url
 * @param items_limit max number of items to fetch from the bookshelf
 * 
 * @return string containing the presentation of the bookshelf
 */
function _fetch_bookshelf($url, $items_limit) {
  $result = drupal_http_request($url);

  if (200 == $result->code) {
    //we've got the xml document - try to parse it

    try {
      $xmlDoc = _parse_xml_string($result->data);
      $content = _render_booksheld_block_content($xmlDoc, $items_limit, 
          _variable_service_url(),  _variable_nocover_img());
    } catch (Exception $e) {
      
      watchdog('goodreads', "Error parsing xml document from goodreads service using the %url:%error", 
          array("url" => $url, "error" => $e->getMessage()), WATCHDOG_ERROR);
      $content = t("Getting goodreads bookshelf resulted in error");
    }
  }
  else {
    $msg = "No content found from the %url";
    watchdog('goodreads', $msg, array("url" => $url), WATCHDOG_WARNING);
    $content = t('Unable to load bookshelf from default url. Contact you administrator.');
  }
  
  return $content;
}

/**
 * The function renders the content of bookshelft content from the given xml
 * document with data using the given number of items
 * 
 * @param SimpleXMLElement $xml document root element
 * @param type $items_limit  maximum number of items to be displayed on the shell
 * @param $nourl_link url to be used for books with missed url
 * @param $nocover_link image url to be used for books without cover image
 */
function _render_booksheld_block_content(SimpleXMLElement $xml, $items_limit, $nourl_link, $nocover_link) {
  $items = $xml->channel->item;
  $count_items = count($items);
  $length = ( $count_items > $items_limit ) ? $items_limit : $count_items;
  $template = '<div class="goodreads-item"><img src="%s"/><br/>%s<br/>by %s</div>';
  $content = "";
  $itemIndex = 0;
  
  foreach ($items as $item) {
    $itemIndex++;
    if ($itemIndex > $length) break;
    
    $author = check_plain($item->author_name);
    $title = strip_tags($item->title);
    $link = check_url(trim($item->link));
    $img = check_url(trim($item->book_image_url));
    if (empty($author)) $author = "";
    if (empty($title)) $title = "";
    if (empty($link)) $link = $nourl_link;
    if (empty($img)) $img = $nocover_link;
    
    $content .= sprintf($template, $img, l($title, $link),$author);
  }
  
  $content .= '<br/><div class="goodreads-more">'. 
      l('Goodreads.com', 'http://www.goodreads.com').'</div>';
  return $content;
}

/**
 * Parse the given xml string and returns the SimpleXMLElement object if ok,
 * else throws exception
 * @param String $xmlData 
 */
function _parse_xml_string($xmlData) {
  libxml_use_internal_errors(true);

  try {
    $xmlDoc = simplexml_load_string($xmlData);
  } catch (Exception $ex) {
    throw new Exception($ex->getMessage());
  }

  //check whether we parsed the string 
  if (false === $xmlDoc) {
    $exMessage = "";
    //gather produces xml parsing errors
    foreach (libxml_get_errors() as $error) {
      $exMessage .= $error->message . "\t";
    }
    libxml_clear_errors();

    //generate new exception
    throw new Exception($exMessage);
  }

  return $xmlDoc;
}



function _variable_service_url() {
  return variable_get(VAR_GOODREADS_SERVICE_URL, DEFAULT_GOODREADS_SERVICE_URL);
}

function _variable_bookshelf_url() {
  return variable_get(VAR_GOODREADS_BOOKSHELF_URL, DEFAULT_GOODREADS_BOOKSHELF_URL);
}

function _variable_nocover_img() {
  return variable_get(VAR_GOODREADS_NOCOVER_IMG_URL, DEFAULT_GOODREADS_NOCOVER_IMG);
}

function _variable_items_number() {
  return variable_get(VAR_GOODREADS_ITEMS_NUMBER, DEFAULT_GOODREADS_ITEMS_NUMBER);
}

////////////////////////////////////////////////////////////////////////////////
// --------- configuration section ---------------------------------------------
/**
 * Implementation of hook_menu().
 *
 * @return An array of menu items.
 */
function bookshelf_menu() {
  $items = array();

  $items[GOODREADS_CONFIG_MENU_URL] = array(
    'title' => 'Goodreads bookshelf',
    'description' => 'Configuration of goodreads bookshelf support',
    'page callback' => 'bookshelf_configuration',
    'page arguments' => array(),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * Implementation of menu item callback handler 
 */
function bookshelf_configuration() {
  return drupal_get_form('bookshelf_configure_form');
}

/**
 * Form constructor for bookshelf configuration module form
 * @param type $context 
 */
function bookshelf_configure_form($context) {
  return array(
    VAR_GOODREADS_SERVICE_URL => array(
          '#type' => 'textfield',
          '#title' => t('Goodreads service url'),
          '#size' => 100,
          '#maxlength' => 255,
          '#description' => t('Enter full valid url of goodreads service home page (with http://)'),
          '#default_value' => _variable_service_url()
      ),    
    VAR_GOODREADS_BOOKSHELF_URL => array(
          '#type' => 'textfield',
          '#title' => t('Goodreads bookshelf url'),
          '#size' => 100,
          '#maxlength' => 255,
          '#description' => t('Enter full valid url of goodreads bookshelf RSS channel'),
          '#default_value' => _variable_bookshelf_url()
      ),        
    VAR_GOODREADS_NOCOVER_IMG_URL => array(
          '#type' => 'textfield',
          '#title' => t('Nocover image url'),
          '#size' => 100,
          '#maxlength' => 255,
          '#description' => t('Enter full valid url of an image to be used in case the book cover image does not exist'),
          '#default_value' => _variable_nocover_img()
      ),        
    VAR_GOODREADS_ITEMS_NUMBER => array(
          '#type' => 'textfield',
          '#title' => t('Books to display'),
          '#size' => 10,
          '#maxlength' => 3,
          '#description' => t('Enter number of books (>0) to be displayed on bookshelf'),
          '#default_value' => _variable_items_number()
      ),        
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save')
    ),
    'reset' => array(
      '#type' => 'submit',
      '#value' => t('Reset to default')
    ),
  );  
}

/**
 * Validation function of bookshelf configuration form
 * 
 */
function bookshelf_configure_form_validate($form, &$form_state) {
  $operation = $form['#post']['op'];
  $form_values = $form_state['values'];
  
  if (t('Save') === $operation) {
    //save opeation is executed

    $urlErrorMessage = 'Please enter valid url for !url_name <br>';
    $errorMessage = '';
    if (!valid_url($form_values[VAR_GOODREADS_SERVICE_URL]))
      $errorMessage .= t($urlErrorMessage, array('!url_name' => 'Goodreads service home page'));
    
    if (!valid_url($form_values[VAR_GOODREADS_BOOKSHELF_URL]))
      $errorMessage .= t($urlErrorMessage, array('!url_name' => 'Goodreads bookshelf'));
    
    if (!valid_url($form_values[VAR_GOODREADS_NOCOVER_IMG_URL]))
      $errorMessage .= t($urlErrorMessage, array('!url_name' => 'Nocover image'));
    
    $itemsNumber = intval($form_values[VAR_GOODREADS_ITEMS_NUMBER]);
    if (0 === $itemsNumber || $itemsNumber < 0)
      $errorMessage .= t('Please enter valid positive number of books to be displayed');
    
    if (!empty($errorMessage))  form_set_error('', $errorMessage);
  }
}

/**
 * Validation function of bookshelf configuration form
 * 
 */
function bookshelf_configure_form_submit($form, &$form_state) {
  $operation = $form['#post']['op'];
  $form_values = $form_state['values'];
  
  if (t('Save') === $operation) {
    //save opeation is executed
    variable_set(VAR_GOODREADS_SERVICE_URL,     $form_values[VAR_GOODREADS_SERVICE_URL]);
    variable_set(VAR_GOODREADS_BOOKSHELF_URL,   $form_values[VAR_GOODREADS_BOOKSHELF_URL]);
    variable_set(VAR_GOODREADS_NOCOVER_IMG_URL, $form_values[VAR_GOODREADS_NOCOVER_IMG_URL]);
    variable_set(VAR_GOODREADS_ITEMS_NUMBER,    $form_values[VAR_GOODREADS_ITEMS_NUMBER]);
    
    drupal_set_message(t('The settings were saved'));
  }  
  
  if (t('Reset to default') === $operation) {
    //reset to default values
    variable_set(VAR_GOODREADS_SERVICE_URL,     DEFAULT_GOODREADS_SERVICE_URL);
    variable_set(VAR_GOODREADS_BOOKSHELF_URL,   DEFAULT_GOODREADS_BOOKSHELF_URL);
    variable_set(VAR_GOODREADS_NOCOVER_IMG_URL, DEFAULT_GOODREADS_NOCOVER_IMG);
    variable_set(VAR_GOODREADS_ITEMS_NUMBER,    DEFAULT_GOODREADS_ITEMS_NUMBER);
    
    drupal_set_message(t('The settings were reset to default values'));    
  }
}